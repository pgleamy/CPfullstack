<script>
    import UserInput from './userinput.svelte';
    import UserInputSent from './userinputsent.svelte';
    import LLMResponse from './llmresponse.svelte';
    import { onMount } from 'svelte';

    let userInputComponent;

    let scrollContainer;
    let targetScrollTop = 0;
    let currentVelocity = 0;
    const easingFactor = .3;


    function adjustScroll() {
  const inputField = userInputComponent.querySelector('input');
  const cursorRect = inputField.getBoundingClientRect();
  const cursorBottom = cursorRect.bottom;
  const windowHeight = window.innerHeight;
  const requiredScroll = cursorBottom + 30 - windowHeight; // 30 pixels buffer

  if (requiredScroll > 0) {
    scrollContainer.scrollTop += requiredScroll;
  }
}


function getTextMetrics(inputField, text) {
  const dummyElement = document.createElement('pre');
  dummyElement.style.font = getComputedStyle(inputField).font;
  dummyElement.textContent = text;
  document.body.appendChild(dummyElement);
  const { width, height } = dummyElement.getBoundingClientRect();
  document.body.removeChild(dummyElement);
  return { width, height };
}



  onMount(() => {
    const inputField = userInputComponent.querySelector('input');
    inputField.addEventListener('focus', adjustScroll);
    inputField.addEventListener('input', adjustScroll);
  });


    $: if (scrollContainer) {
        targetScrollTop = scrollContainer.scrollTop;
        // Listen for keyboard events
        window.addEventListener('keydown', handleKeyDown);
        // Listen for mouse scroll events
        scrollContainer.addEventListener('wheel', handleScroll);
    }

   
    function smoothScroll() {
    const distance = targetScrollTop - scrollContainer.scrollTop;
    if (Math.abs(distance) > 1) {
        currentVelocity += (distance - currentVelocity) * easingFactor;
        scrollContainer.scrollTop += currentVelocity;
        requestAnimationFrame(smoothScroll);
    } else {
        currentVelocity = 0;
    }
}

    function handleKeyDown(event) {
    if (event.key === 'ArrowUp') {
      scrollContainer.scrollTop -= 25; // Scroll up by 30 pixels
    } else if (event.key === 'ArrowDown') {
      scrollContainer.scrollTop += 25; // Scroll down by 30 pixels
    }
    requestAnimationFrame(smoothScroll);
  }

  function handleScroll(event) {
    const multiplier = 0.5;
    targetScrollTop += event.deltaY * multiplier;
    requestAnimationFrame(smoothScroll);
}

   
    // This is a placeholder for the conversation data.
    // In the real application, this will be fetched from the SQL database.
    let conversation = [
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
        { 
            type: 'llm', 
            llmName: 'Jarvis', 
            messageText: 'Hello, Patrick! How can I assist you today?', 
            responseTime: 'Sep 1, 2023, 12:01 PM',
            role: 'Talker'
        },
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
        { 
            type: 'llm', 
            llmName: 'Jarvis', 
            messageText: 'Hello, Patrick! How can I assist you today?', 
            responseTime: 'Sep 1, 2023, 12:01 PM',
            role: 'Talker'
        },
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
        { 
            type: 'llm', 
            llmName: 'Jarvis', 
            messageText: 'Hello, Patrick! How can I assist you today?', 
            responseTime: 'Sep 1, 2023, 12:01 PM',
            role: 'Talker'
        },
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
        { 
            type: 'llm', 
            llmName: 'Jarvis', 
            messageText: 'Hello, Patrick! How can I assist you today?', 
            responseTime: 'Sep 1, 2023, 12:01 PM',
            role: 'Talker'
        },
        { 
            type: 'user', 
            userName: 'Patrick Leamy', 
            messageText: 'Hello, Jarvis!', 
            timestampStart: 'Sep 1, 2023, 12:00 PM',
            timestampEnd: 'Sep 1, 2023, 12:00:30 PM',
            llmName: 'Jarvis',
            role: 'Talker'
        },
    ];


  </script>

<div id="clip-container" bind:this={scrollContainer}>
  <div id="conversation-container">
    {#each conversation as entry}
      {#if entry.type === 'user'}
        <UserInputSent {...entry} />
      {:else if entry.type === 'llm'}
        <LLMResponse {...entry} />
      {/if}
    {/each}
    <UserInput bind:this={userInputComponent} />
  </div>
</div>

   
  <style>
    #conversation-container {
      transition: all 0.4s ease-in-out;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      width: 100%;
      position: relative;
      bottom: 0;
      left: 6px !important;
      padding-bottom: 10px;
      padding-right: 0px;
      overflow: hidden;
    }

    #clip-container {
    position: fixed;
    top: 79px;
    bottom: 10px;
    left: 0;
    right: 0;
    clip-path: inset(0);
    overflow: hidden;
  }
 
  </style>
  